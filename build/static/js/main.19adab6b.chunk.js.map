{"version":3,"sources":["PlainAppBar.jsx","Sheduler.jsx","App.js","serviceWorker.js","redux/types.jsx","redux/reducer.jsx","index.js","logo-white.svg"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","AppBar","backgroundColor","PlainAppBar","classes","className","position","Toolbar","Button","edge","color","aria-label","src","logo","alt","Typography","variant","IconButton","Sheduler","useState","updateState","forceUpdate","useCallback","carId","startDate","setStartDate","endDate","setEndDate","carData","setFetchedCarData","useEffect","a","axios","get","data","fetchCarData","checkPeriodAvailability","period","showSnackbarNoInput","selectedPeriod","eachDayOfInterval","start","end","selectedPeriodISO","map","date","toISOString","some","reservations","includes","showSnackbarError","bookingIsDone","Set","put","model","license","updateCarData","enqueueSnackbar","showSnackbarSuccess","useSnackbar","monthStart","Date","monthEnd","utils","DateFnsUtils","locale","ruLocale","Grid","container","justify","item","xs","shouldDisableDate","autoOk","clearable","margin","id","label","format","value","onChange","KeyboardButtonProps","minDate","maxDate","onClick","DatePicker","readOnly","App","Boolean","window","location","hostname","match","TYPES","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","type","payload","isLoading","isSuccess","applyMiddleware","thunk","ReactDOM","render","maxSnack","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.19adab6b.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport logo from \"./logo-white.svg\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  AppBar: {\n    backgroundColor: \"#40B5DC\"\n  }\n}));\n\nexport default function PlainAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.AppBar}>\n        <Toolbar>\n          <Button\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <img src={logo} alt=\"logo\" />\n          </Button>\n\n          <Typography variant=\"h6\" className={classes.title}></Typography>\n          \n          <IconButton color=\"inherit\">\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\n// import { useSelector } from \"react-redux\";\nimport { eachDayOfInterval } from \"date-fns\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport ruLocale from \"date-fns/locale/ru\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n  DatePicker\n} from \"@material-ui/pickers\";\nimport axios from \"axios\";\n\nimport { useSnackbar } from \"notistack\";\n\nexport default function Sheduler() {\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n  const [carId, ] = useState(\"1\");\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [carData, setFetchedCarData] = useState(null);\n  // /* reservations data from redux */\n  // const reservations = useSelector(state => state.reservations).map(date =>\n  //   date.toISOString()\n  // );\n\n  useEffect(() => {\n    const fetchCarData = async () => {\n      const { data } = await axios.get(`http://0.0.0.0:9000/cars/${carId}`);\n      setFetchedCarData(data);\n    };\n    fetchCarData();\n  }, [carId, endDate]);\n\n  const handleCalendarChange = date => {\n    // console.log(date.toISOString());\n  };\n  const handleStartDayChange = date => {\n    setStartDate(date);\n    if (date && endDate && date <= endDate) {\n      checkPeriodAvailability({ start: date, end: endDate });\n    }\n  };\n  const handleEndDayChange = date => {\n    setEndDate(date);\n    if (date && startDate && date >= startDate) {\n      checkPeriodAvailability({ start: startDate, end: date });\n    }\n  };\n\n  const checkPeriodAvailability = period => {\n    if (!startDate && !endDate) {\n      return showSnackbarNoInput();\n    }\n    const selectedPeriod = eachDayOfInterval({\n      start: period.start,\n      end: period.end\n    });\n    const selectedPeriodISO = selectedPeriod.map(date => date.toISOString());\n\n    if (\n      selectedPeriod.some(date =>\n        carData.reservations.includes(date.toISOString())\n      )\n    ) {\n      return showSnackbarError();\n    } else {\n      if (period.bookingIsDone) {\n        const updateCarData = async () => {\n          carData.reservations = [\n            ...new Set([...carData.reservations, ...selectedPeriodISO])\n          ];\n          await axios.put(`http://0.0.0.0:9000/cars/${carId}`, {\n            model: carData.model,\n            license: carData.license,\n            reservations: carData.reservations\n          });\n          setFetchedCarData(carData);\n        };\n        updateCarData();\n        enqueueSnackbar(\"Выбранный период забронирован\", {\n          variant: \"success\"\n        });\n        forceUpdate();\n      } else {\n        showSnackbarSuccess();\n      }\n    }\n  };\n\n  const { enqueueSnackbar } = useSnackbar();\n  const showSnackbarError = () => {\n    enqueueSnackbar(\"Выбранный вами период не доступен для бронирования\", {\n      variant: \"error\"\n    });\n  };\n  const showSnackbarSuccess = () => {\n    enqueueSnackbar(\"Выбранный период доступен для бронирования\", {\n      variant: \"success\"\n    });\n  };\n  const showSnackbarNoInput = () => {\n    enqueueSnackbar(\"Выберите период бронирования\", {\n      variant: \"warning\"\n    });\n  };\n\n  const monthStart = new Date(\"2019/01/01\");\n  const monthEnd = new Date(\"2019/01/31\");\n\n  return (\n    <>\n      {carData ? (\n        <>\n          <h3>\n            Бронирование дат для авто модель:{carData.model} рег.номер:\n            {carData.license}{\" \"}\n          </h3>\n          <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ruLocale}>\n            <Grid container justify=\"center\">\n              <Grid item xs={6} justify=\"center\">\n                <Grid item xs={12}>\n                  <KeyboardDatePicker\n                    shouldDisableDate={date =>\n                      carData.reservations.includes(date.toISOString())\n                    }\n                    autoOk\n                    clearable\n                    margin=\"normal\"\n                    id=\"start-date-picker\"\n                    label=\"Start date\"\n                    format=\"dd/MM/yyyy\"\n                    value={startDate}\n                    onChange={handleStartDayChange}\n                    KeyboardButtonProps={{\n                      \"aria-label\": \"change date\"\n                    }}\n                    minDate={monthStart}\n                    maxDate={endDate || monthEnd}\n                  />\n                  <KeyboardDatePicker\n                    shouldDisableDate={date =>\n                      carData.reservations.includes(date.toISOString())\n                    }\n                    autoOk\n                    clearable\n                    margin=\"normal\"\n                    id=\"end-date-picker\"\n                    label=\"End date\"\n                    format=\"dd/MM/yyyy\"\n                    value={endDate}\n                    onChange={handleEndDayChange}\n                    KeyboardButtonProps={{\n                      \"aria-label\": \"change date\"\n                    }}\n                    minDate={startDate || monthStart}\n                    maxDate={monthEnd}\n                  />\n                </Grid>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() =>\n                    checkPeriodAvailability({\n                      start: startDate,\n                      end: endDate,\n                      bookingIsDone: true\n                    })\n                  }\n                >\n                  Забронировать\n                </Button>\n              </Grid>\n              <DatePicker\n                value={monthStart}\n                shouldDisableDate={date =>\n                  carData.reservations.includes(date.toISOString())\n                }\n                readOnly\n                variant=\"static\"\n                margin=\"normal\"\n                onChange={handleCalendarChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\"\n                }}\n              />\n            </Grid>\n          </MuiPickersUtilsProvider>\n        </>\n      ) : (\n        <h3>Loading...</h3>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport PlainAppBar from \"./PlainAppBar\";\nimport Sheduler from \"./Sheduler\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PlainAppBar />\n      <Sheduler />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const TYPES = {\n  FETCH_CAR_INFO_REQUEST: \"FETCH_CAR_INFO_REQUEST\",\n  FETCH_CAR_INFO_SUCCESS: \"FETCH_CAR_INFO_SUCCESS\",\n  FETCH_CAR_INFO_FAILURE: \"FETCH_CAR_INFO_FAILURE\"\n};\n","import { TYPES } from \"./types\";\nimport { eachDayOfInterval } from \"date-fns\";\n\nconst initialState = {\n  id: \"1\",\n  model: \"creta\",\n  license: \"А111АА750\",\n  reservations: [\n    ...eachDayOfInterval({\n      start: new Date(\"2019/01/01\"),\n      end: new Date(\"2019/01/05\")\n    }),\n    new Date(\"2019/01/10\")\n  ]\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case TYPES.FETCH_CAR_INFO_REQUEST: {\n      return {\n        ...state,\n        isLoading: true,\n        isSuccess: false\n      };\n    }\n\n    case TYPES.FETCH_CAR_INFO_SUCCESS: {\n      return {\n        ...state,\n        isLoading: false,\n        isSuccess: true,\n        ...payload\n      };\n    }\n\n    case TYPES.FETCH_CAR_INFO_FAILURE: {\n      return {\n        ...state,\n        isLoading: false,\n        isSuccess: false\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from \"./redux/reducer\";\nimport thunk from \"redux-thunk\";\n\nimport { SnackbarProvider } from \"notistack\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <SnackbarProvider maxSnack={1}>\n        <App />\n      </SnackbarProvider>\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-white.38e93baf.svg\";"],"sourceRoot":""}